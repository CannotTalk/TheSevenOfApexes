package net.ardcameg.thesevenofapexes;

import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.common.ModConfigSpec;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Config {
    private static final ModConfigSpec.Builder BUILDER = new ModConfigSpec.Builder();
    private static final Logger log = LoggerFactory.getLogger(Config.class);

    static {
        BUILDER.push("Legendary Rarity Ability");

        wrathProbabilityModifier = BUILDER
                .comment("Percentage of a target's max health dealt as damage by Wrath's lightning.")
                .defineInRange("wrathProbabilityModifier", 0.5, 0.0, 1.0);

        slothActivateBaseTicks = BUILDER
                .comment("Base number of ticks the player must stand still for Sloth's ability to activate.")
                .defineInRange("slothBaseTicks", 300, 10, 1200);
        slothActivateTicksModifier = BUILDER
                .comment("Number of ticks reduced from the requirement per additional Sloth item.")
                .defineInRange("slothModifierTicks",50, 0, 200);
        slothHealthRegenerateBase = BUILDER
                .comment("Base percentage of max health regenerated by Sloth.")
                .defineInRange("slothHpRegenerateBase", 0.1, 0.1, 1.0);
        slothMendingBasePoint = BUILDER
                .comment("Amount of durability restored per player level by Sloth.")
                .defineInRange("slothMendingPoint", 2, 0, 1000);

        greedBaseDropRate = BUILDER
                .comment("Base drop multiplier for Greed (e.g., 1 means drops are doubled).")
                .defineInRange("greedBaseDropRate", 1, 0, 100);

        gluttonyBaseGauge = BUILDER
                .comment("Base gauge amount required to level up for Gluttony.")
                .defineInRange("gluttonyBaseGaugeAmount", 100, 0, 10000);
        gluttonyGaugeModifier = BUILDER
                .comment("Additional gauge amount required per level for Gluttony.")
                .defineInRange("gluttonyGaugeModifier", 100, 0, 10000);
        gluttonyHealthModifier = BUILDER
                .comment("Amount of max health gained per level up for Gluttony.")
                .defineInRange("gluttonyHealthModifier", 2, 0, 20);

        lustEffectLevel = BUILDER
                .comment("Level of the Hero of the Village effect granted by Lust.")
                .defineInRange("lustEffectLevel", 13, 0 , 255);

        sunsealBuffAttackPower = BUILDER
                .comment("Attack power multiplier from Sunlight Sacred Seal.")
                .defineInRange("sunsealAttackPowerModifier", 0.25, 0, 10.0);
        sunsealBuffSpeed = BUILDER
                .comment("Movement speed multiplier from Sunlight Sacred Seal.")
                .defineInRange("sunsealSpeedModifier", 0.5, 0, 10.0);
        sunsealBuffAttackSpeed = BUILDER
                .comment("Attack speed multiplier from Sunlight Sacred Seal.")
                .defineInRange("sunsealAttackSpeedModifier", 0.25, 0, 10.0);
        sunsealBuffPlantsBaseRadius = BUILDER
                .comment("Base radius of plant growth promotion from Sunlight Sacred Seal.")
                .defineInRange("sunsealPromotePlantsRadius", 2, 0, 16);
        sunsealBuffPlantsChecks = BUILDER
                .comment("Number of growth ticks applied per second in the area by Sunlight Sacred Seal.")
                .defineInRange("sunsealPromotePlantsTimes", 5, 1, 100);

        moonsealDebuffSpeedBaseMultiplier = BUILDER
                .comment("Base movement speed multiplier for the player from Moonlight Sacred Seal.")
                .defineInRange("moonsealDebuffSpeedBaseMultiplier", -0.25, -100.0, 100.0);
        moonsealDebuffSpeedMultiplierModifier = BUILDER
                .comment("Additional movement speed multiplier for the player per additional item.")
                .defineInRange("moonsealDebuffSpeedMultiplierModifier", -0.01, -100.0, 100.0);
        moonsealBuffBaseSlowdown = BUILDER
                .comment("Base movement speed multiplier for surrounding mobs from Moonlight Sacred Seal.")
                .defineInRange("moonsealBuffSpeedBaseMultiplier", -0.5, -100.0, 100.0);
        moonsealBuffSlowdownModifier = BUILDER
                .comment("Additional movement speed multiplier for mobs per additional item.")
                .defineInRange("moonsealBuffSpeedMultiplierModifier", -0.05, -100.0, 100.0);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue wrathProbabilityModifier;
    public static final ModConfigSpec.IntValue slothActivateBaseTicks;
    public static final ModConfigSpec.IntValue slothActivateTicksModifier;
    public static final ModConfigSpec.DoubleValue slothHealthRegenerateBase;
    public static final ModConfigSpec.IntValue slothMendingBasePoint;
    public static final ModConfigSpec.IntValue greedBaseDropRate;
    public static final ModConfigSpec.IntValue gluttonyBaseGauge;
    public static final ModConfigSpec.IntValue gluttonyGaugeModifier;
    public static final ModConfigSpec.IntValue gluttonyHealthModifier;
    public static final ModConfigSpec.IntValue lustEffectLevel;
    public static final ModConfigSpec.DoubleValue sunsealBuffAttackPower;
    public static final ModConfigSpec.DoubleValue sunsealBuffSpeed;
    public static final ModConfigSpec.DoubleValue sunsealBuffAttackSpeed;
    public static final ModConfigSpec.IntValue sunsealBuffPlantsBaseRadius;
    public static final ModConfigSpec.IntValue sunsealBuffPlantsChecks;
    public static final ModConfigSpec.DoubleValue moonsealDebuffSpeedBaseMultiplier;
    public static final ModConfigSpec.DoubleValue moonsealDebuffSpeedMultiplierModifier;
    public static final ModConfigSpec.DoubleValue moonsealBuffBaseSlowdown;
    public static final ModConfigSpec.DoubleValue moonsealBuffSlowdownModifier;


    static {
        BUILDER.push("Epic Rarity Abilities");

        lightningFistChainBaseProbability = BUILDER
                .comment("Base probability of chaining attacks with Lightning Fist.")
                .defineInRange("lightningFistBaseProbability", 0.25, 0.01,1.0);
        lightningFistChainProbabilityModifier = BUILDER
                .comment("Additional probability of chaining attacks per additional item.")
                .defineInRange("lightningFistProbabilityModifier", 0.05, 0, 1.0);
        lightningFistChainAttackDecay = BUILDER
                .comment("Damage reduction multiplier for each subsequent chain attack.")
                .defineInRange("lightningFistChainDecay", 0, 0, 1.0);


        heartOfStormProcChanceModifier = BUILDER
                .comment("Base chance for Heart of Storm to activate when hit.")
                .defineInRange("heartOfStormProcChance", 0.3, 0, 1.0);
        heartOfStormProbability = BUILDER
                .comment("Percentage of the attacker's max health dealt as damage by Heart of Storm's lightning.")
                .defineInRange("heartOfStormProbabilityModifier", 0.25, 0, 1.0);
        heartOfStormStunTicks = BUILDER
                .comment("Stun duration in ticks for the player when Heart of Storm activates.")
                .defineInRange("heartOfStormStunTicks", 40, 0, 1200);

        phoenixFeatherModifier = BUILDER
                .comment("Max health multiplier applied for a duration after reviving with Phoenix Feather.")
                .defineInRange("phoenixFeatherMaxHealthModifier", -0.5, -0.9, 0);
        phoenixFeatherWeakTicks = BUILDER
                .comment("Duration in ticks of the max health reduction after revival.")
                .defineInRange("phoenixFeatherWeakTicks", 600, 0, 1200);

        shadowBindGlovesProcBaseChance = BUILDER
                .comment("Base probability of stunning the target with Shadow-Bind Gloves.")
                .defineInRange("shadowBindGlovesBaseChance", 0.5, 0, 1.0);
        shadowBindGlovesStunTicks = BUILDER
                .comment("Stun duration in ticks when Shadow-Bind Gloves activates.")
                .defineInRange("shadowBindGlovesStunTicks", 60, 0, 1200);

        berserkersDragAttackPower = BUILDER
                .comment("Attack damage multiplier from Berserker's Drag.")
                .defineInRange("berserkersDragAttackPower", 0.25, 0, 10.0);
        berserkersDragAttackSpeed = BUILDER
                .comment("Attack speed multiplier from Berserker's Drag.")
                .defineInRange("berserkersDragAttackSpeed", 1.0, 0, 10.0);
        berserkersDragDamageIncrease = BUILDER
                .comment("Incoming damage multiplier from Berserker's Drag.")
                .defineInRange("berserkersDragDamageIncrease", 1.0, 0, 10.0);

        lifeStealLifestealBaseRatio = BUILDER
                .comment("Percentage of damage dealt that is returned as health by Life Steal Stick.")
                .defineInRange("lifeSteelLifestealRatio", 0.1, 0.0, 1.0);
        lifeStealMaxHealthPenalty = BUILDER
                .comment("Max health multiplier from Life Steal Stick.")
                .defineInRange("lifeSteelMaxHealthPenalty", -0.25, -0.9, 0);

        arrivalOfRevivalBaseRadius = BUILDER
                .comment("Base radius of the explosion from Arrival of Revival.")
                .defineInRange("arrivalOfRevivalBaseRadius", 5.0, 0, 16);
        arrivalOfRevivalBaseDamage = BUILDER
                .comment("Base damage of the explosion from Arrival of Revival.")
                .defineInRange("arrivalOfRevivalBaseDamage", 15.0, 0, 500.0);
        arrivalOfRevivalClearProbability = BUILDER
                .comment("Chance to clear the inventory upon revival with Arrival of Revival.")
                .defineInRange("arrivalOfRevivalClearProbability", 0.05, 0.0, 1.0);

        walkingAnathemaBaseRadius = BUILDER
                .comment("Base radius of the damage aura from Walking Anathema.")
                .defineInRange("walkingAnathemaBaseRadius", 4.0, 0, 16.0);
        walkingAnathemaDamagePerSecond = BUILDER
                .comment("Base damage per second of the aura from Walking Anathema.")
                .defineInRange("walkingAnathemaDamagePerSecond", 3, 1, 500.0);

        scarredGrailExplodeChance = BUILDER
                .comment("Chance for the Scarred Grail to shatter and release stored damage when hit.")
                .defineInRange("scarredGrailExplodeChance", 0.2, 0.1, 0.99);

        voidMantleVanishChance = BUILDER
                .comment("Chance for Mantle of the Void to vanish when invisibility ends.")
                .defineInRange("voidMantleVanishChance", 0.05, 0.01, 1.0);
        voidMantleConsumeIntervalTicks = BUILDER
                .comment("The interval in ticks at which hunger is consumed while invisible.")
                .defineInRange("voidMantleConsumeInterval", 40, 0, 1200);
        voidMantleConsumeHungerPoint = BUILDER
                .comment("The amount of hunger (in points) consumed at each interval.")
                .defineInRange("voidMantleConsumePoint", 4, 0, 20);

        steelClawsProcChanceBase = BUILDER
                .comment("Base chance for Claws of Steel to activate on hit (for the first item).")
                .defineInRange("steelClawsProcChanceBase", 0.025, 0.0, 1.0);
        steelClawsSelfKillChance = BUILDER
                .comment("Chance to kill yourself instead of the target when Claws of Steel activates.")
                .defineInRange("steelClawsSelfKillChance", 0.01, 0.0, 1.0);
        steelClawsBossDamageRatio = BUILDER
                .comment("Percentage of a boss's max health dealt as damage when Claws of Steel activates on them.")
                .defineInRange("steelClawsBossDamageRatio", 0.25, 0.0, 1.0);

        fiendsBargainXpCost = BUILDER
                .comment("Experience levels required to activate The Fiend's Bargain.")
                .defineInRange("fiendsBargainXpCost", 5, 1, 100);

        reversalHourglassProcBaseChance = BUILDER
                .comment("Base chance of reflecting all damage with Hourglass of Reversal.")
                .defineInRange("reversalHourglassReflectBaseChance", 0.1, 0.01, 1.0);
        reversalHourglassReflectRate = BUILDER
                .comment("Percentage of damage taken dealt back to the attacker if reflection fails.")
                .defineInRange("reversalHourglassReflectRate", 0.5, 0.01, 1.0);
        reversalHourglassMaxHealthPenalty = BUILDER
                .comment("Max health multiplier from Hourglass of Reversal.")
                .defineInRange("reversalHourglassMaxHealthPenalty", -0.25, -0.9, 0);

        goliathsGavelBaseRadius = BUILDER
                .comment("Base radius of the area-of-effect attack for Goliath's Gavel.")
                .defineInRange("goliathsGavelBaseRadius", 3.0, 0.5, 16.0);
        goliathsGavelDamageModifier = BUILDER
                .comment("Percentage of main attack damage dealt to secondary targets in the area.")
                .defineInRange("goliathGavelDamageModifier", 0.75, 0, 1.0);
        goliathsGavelAttackPowerModifier = BUILDER
                .comment("Attack damage multiplier from Goliath's Gavel.")
                .defineInRange("goliathsGavelAttackPowerModifier", 0.25, 0, 10.0);
        goliathsGavelAttackSpeedModifier = BUILDER
                .comment("Attack speed multiplier from Goliath's Gavel.")
                .defineInRange("goliathsGavelAttackSpeedModifier", -0.5, -1.0, 0);
        goliathsGavelMovementSpeedModifier = BUILDER
                .comment("Movement speed multiplier from Goliath's Gavel.")
                .defineInRange("goliathsGavelMovementSpeedModifier", -0.15, -1.0, 0);

        ferrymanBargeBaseRegenerate = BUILDER
                .comment("Base amount of health restored by The Ferryman's Barge after revival.")
                .defineInRange("ferrymanBargeBaseRegenerate", 2.0, 0.0, 100.0);
        ferrymanBargeSpectatorBaseTicks = BUILDER
                .comment("Base duration in ticks of the Spectator Mode phase.")
                .defineInRange("ferrymanBargeSpectatorBaseTicks", 100, 1, 1200);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue lightningFistChainBaseProbability;
    public static final ModConfigSpec.DoubleValue lightningFistChainProbabilityModifier;
    public static final ModConfigSpec.DoubleValue lightningFistChainAttackDecay;
    public static final ModConfigSpec.DoubleValue heartOfStormProcChanceModifier;
    public static final ModConfigSpec.DoubleValue heartOfStormProbability;
    public static final ModConfigSpec.IntValue heartOfStormStunTicks;
    public static final ModConfigSpec.DoubleValue phoenixFeatherModifier;
    public static final ModConfigSpec.IntValue phoenixFeatherWeakTicks;
    public static final ModConfigSpec.DoubleValue shadowBindGlovesProcBaseChance;
    public static final ModConfigSpec.IntValue shadowBindGlovesStunTicks;
    public static final ModConfigSpec.DoubleValue berserkersDragAttackPower;
    public static final ModConfigSpec.DoubleValue berserkersDragAttackSpeed;
    public static final ModConfigSpec.DoubleValue berserkersDragDamageIncrease;
    public static final ModConfigSpec.DoubleValue lifeStealLifestealBaseRatio;
    public static final ModConfigSpec.DoubleValue lifeStealMaxHealthPenalty;
    public static final ModConfigSpec.DoubleValue arrivalOfRevivalBaseRadius;
    public static final ModConfigSpec.DoubleValue arrivalOfRevivalBaseDamage;
    public static final ModConfigSpec.DoubleValue arrivalOfRevivalClearProbability;
    public static final ModConfigSpec.DoubleValue walkingAnathemaBaseRadius;
    public static final ModConfigSpec.DoubleValue walkingAnathemaDamagePerSecond;
    public static final ModConfigSpec.DoubleValue scarredGrailExplodeChance;
    public static final ModConfigSpec.DoubleValue voidMantleVanishChance;
    public static final ModConfigSpec.IntValue voidMantleConsumeIntervalTicks;
    public static final ModConfigSpec.IntValue voidMantleConsumeHungerPoint;
    public static final ModConfigSpec.DoubleValue steelClawsProcChanceBase;
    public static final ModConfigSpec.DoubleValue steelClawsSelfKillChance;
    public static final ModConfigSpec.DoubleValue steelClawsBossDamageRatio;
    public static final ModConfigSpec.IntValue fiendsBargainXpCost;
    public static final ModConfigSpec.DoubleValue reversalHourglassProcBaseChance;
    public static final ModConfigSpec.DoubleValue reversalHourglassReflectRate;
    public static final ModConfigSpec.DoubleValue reversalHourglassMaxHealthPenalty;
    public static final ModConfigSpec.DoubleValue goliathsGavelBaseRadius;
    public static final ModConfigSpec.DoubleValue goliathsGavelDamageModifier;
    public static final ModConfigSpec.DoubleValue goliathsGavelAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue goliathsGavelAttackSpeedModifier;
    public static final ModConfigSpec.DoubleValue goliathsGavelMovementSpeedModifier;
    public static final ModConfigSpec.DoubleValue ferrymanBargeBaseRegenerate;
    public static final ModConfigSpec.IntValue ferrymanBargeSpectatorBaseTicks;

    static {
        BUILDER.push("Rare Rarity Ability");

        nightOwlEyesAttackPowerModifier = BUILDER
                .comment("Attack damage multiplier during the day from Eyes of the Night Owl.")
                .defineInRange("nightOwlEyesAttackModifier", -0.25, -1.0, 0);
        nightOwlEyesMovementSpeedModifier = BUILDER
                .comment("Movement speed multiplier during the day from Eyes of the Night Owl.")
                .defineInRange("nightOwlEyesSpeedModifier", -0.1, -1.0, 0);

        snipersMonocleVelocityModifier = BUILDER
                .comment("Arrow velocity multiplier from Sniper's Monocle.")
                .defineInRange("snipersMonocleVelocityModifier", 0.3, 0.1, 100.0);
        snipersMonocleDamageModifier = BUILDER
                .comment("Arrow damage multiplier from Sniper's Monocle.")
                .defineInRange("snipersMonocleDamageModifier", 0.15, 0.1, 10.0);
        snipersMonocleMeleeDamageModifier = BUILDER
                .comment("Melee damage multiplier from Sniper's Monocle.")
                .defineInRange("snipersMonocleMeleeDamageModifier", -0.2, -1.0, 0);

        gillsCharmDebuffMovementModifier = BUILDER
                .comment("Movement speed multiplier while on land from Gills Charm.")
                .defineInRange("gillsCharmMovementSpeedModifier", -0.05, -1.0, 0);

        lastStandNeedHealth = BUILDER
                .comment("Health threshold (as a percentage of max health) below which Last Stand's effects activate.")
                .defineInRange("lastStandNeedHealth", 0.25, 0.01, 1.0);
        lastStandAttackSpeedModifier = BUILDER
                .comment("Attack speed multiplier when Last Stand is active.")
                .defineInRange("lastStandAttackSpeedModifier", 0.5, 0, 10.0);
        lastStandAttackPowerModifier = BUILDER
                .comment("Attack damage multiplier when Last Stand is active.")
                .defineInRange("lastStandAttackPowerModifier", 0.25, 0, 10.0);

        blademastersProwessCloseRangeAttackModifier = BUILDER
                .comment("Melee attack damage multiplier from Blademaster's Prowess.")
                .defineInRange("blademastersProwessCloseRangeAttackModifier", 0.3, 0, 10.0);
        blademastersProwessAttackSpeedModifier = BUILDER
                .comment("Attack speed multiplier from Blademaster's Prowess.")
                .defineInRange("blademastersProwessAttackSpeedModifier", 0.15, 0, 10.0);
        blademastersProwessLongRangeAttackModifier = BUILDER
                .comment("Ranged attack damage multiplier from Blademaster's Prowess.")
                .defineInRange("blademastersProwessLongRangeAttackModifier", -0.2, -1.0, 0);

        deadeyeGlassAttackPowerModifier = BUILDER
                .comment("Critical hit damage multiplier from Deadeye Glass.")
                .defineInRange("deadeyeGlassAttackPowerModifier", 0.5, 0, 10.0);

        architectsHasteBreakSpeedModifier = BUILDER
                .comment("Block breaking speed multiplier from Architect's Haste.")
                .defineInRange("architectsHasteBreakSpeedModifier", 0.25, 0, 100.0);
        architectsHasteInteractRangeModifier = BUILDER
                .comment("Block interaction range multiplier from Architect's Haste.")
                .defineInRange("architectsHasteInteractRangeModifier", 0.25, 0, 100.0);
        architectsHasteToolPenaltyModifier = BUILDER
                .comment("Additional chance to consume tool durability when using tools with Architect's Haste.")
                .defineInRange("architectsHasteToolPenalty", 0.25, 0, 1.0);

        bountyTotemAdditionalGrowthChance = BUILDER
                .comment("Chance for crops to receive an extra growth tick from Totem of Bounty.")
                .defineInRange("bountyTotemAdditionalGrowthChance", 0.5, 0, 1.0);
        bountyTotemFarmlandChangeChance = BUILDER
                .comment("Chance for farmland to turn into dirt when harvesting crops with Totem of Bounty.")
                .defineInRange("bountyTotemFarmlandChangeChance", 0.2, 0, 1.0);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue nightOwlEyesAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue nightOwlEyesMovementSpeedModifier;
    public static final ModConfigSpec.DoubleValue snipersMonocleVelocityModifier;
    public static final ModConfigSpec.DoubleValue snipersMonocleDamageModifier;
    public static final ModConfigSpec.DoubleValue snipersMonocleMeleeDamageModifier;
    public static final ModConfigSpec.DoubleValue gillsCharmDebuffMovementModifier;
    public static final ModConfigSpec.DoubleValue lastStandNeedHealth;
    public static final ModConfigSpec.DoubleValue lastStandAttackSpeedModifier;
    public static final ModConfigSpec.DoubleValue lastStandAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue blademastersProwessCloseRangeAttackModifier;
    public static final ModConfigSpec.DoubleValue blademastersProwessAttackSpeedModifier;
    public static final ModConfigSpec.DoubleValue blademastersProwessLongRangeAttackModifier;
    public static final ModConfigSpec.DoubleValue deadeyeGlassAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue architectsHasteBreakSpeedModifier;
    public static final ModConfigSpec.DoubleValue architectsHasteInteractRangeModifier;
    public static final ModConfigSpec.DoubleValue architectsHasteToolPenaltyModifier;
    public static final ModConfigSpec.DoubleValue bountyTotemAdditionalGrowthChance;
    public static final ModConfigSpec.DoubleValue bountyTotemFarmlandChangeChance;

    static {
        BUILDER.push("Uncommon Rarity Ability");

        pearlEyeDamageModifier = BUILDER
                .comment("Damage reduction from Ender Pearl teleportation with Eye of the Pearl.")
                .defineInRange("pearlEyeDamageModifier", 2.0, 0.0, 100.0);

        scentOfCompostBoostComposterChance = BUILDER
                .comment("Chance to grant an extra level in a composter with Scent of Compost.")
                .defineInRange("scentOfCompostBoostComposterChance", 0.1, 0.0, 1.0);

        fertileClodExtraBornmealChance = BUILDER
                .comment("Chance for an extra growth stage when using bone meal with Fertile Clod.")
                .defineInRange("fertileClodExtraBornmealChance", 0.1, 0.0, 1.0);

        luckyFlintFlintDropAdditionalChance = BUILDER
                .comment("Additional chance to get flint from gravel with Lucky Flint.")
                .defineInRange("luckyFlintFlintDropAdditionalChance", 0.15, 0.0, 1.0);

        healingLinensHealThreshold = BUILDER
                .comment("Amount of health restored when right-clicking a bed with low health.")
                .defineInRange("healingLinensHealThreshold", 6.0, 0, 100.0);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue pearlEyeDamageModifier;
    public static final ModConfigSpec.DoubleValue scentOfCompostBoostComposterChance;
    public static final ModConfigSpec.DoubleValue fertileClodExtraBornmealChance;
    public static final ModConfigSpec.DoubleValue luckyFlintFlintDropAdditionalChance;
    public static final ModConfigSpec.DoubleValue healingLinensHealThreshold;

    static {
        BUILDER.push("Common Rarity Ability");

        oldAnglersDiaryMessageCount = BUILDER
                .comment("The total number of unique messages available for the Old Angler's Diary.")
                .defineInRange("oldAnglersDiaryMessageCount", 20, 1, 255);

        BUILDER.pop();
    }

    public static final ModConfigSpec.IntValue oldAnglersDiaryMessageCount;

    static {
        BUILDER.push("Forbidden Rarity Ability");

        unstoppableImpulseBaseTicks = BUILDER
                .comment("Duration in ticks for the Unstoppable Impulse countdown. (20 ticks = 1 second)")
                .defineInRange("unstoppableImpulseBaseTicks", 1200, 100, 72000);
        unstoppableImpulseShortResetTicks = BUILDER
                .comment("The shorter countdown in ticks Unstoppable Impulse resets to if a mob is killed when the timer is low. (Default: 30 seconds)")
                .defineInRange("unstoppableImpulseShortResetTicks", 600, 100, 72000);
        unstoppableImpulseExplosionPower = BUILDER
                .comment("The power of the explosion when the Unstoppable Impulse timer runs out. (Charged Creeper = 6.0)")
                .defineInRange("unstoppableImpulseExplosionPower", 6.0f, 1.0f, 12.0f);

        pactOfDecayIntervalTicks = BUILDER
                .comment("The interval in ticks at which Pact of Decay triggers.")
                .defineInRange("pactOfDecayIntervalTicks", 200, 20, 1200);

        whispersOfTheVoidRequiredTicks = BUILDER
                .comment("The number of ticks the player must stand still to commit suicide with Whispers of the Void.")
                .defineInRange("whispersOfTheVoidRequiredTicks", 100, 20, 600);
        whispersOfTheVoidGracePeriodTicks = BUILDER
                .comment("The grace period in ticks after respawning during which Whispers of the Void is inactive.")
                .defineInRange("whispersOfTheVoidGracePeriodTicks", 300, 0, 1200);

        heartOfAbyssFirstRequire = BUILDER
                .comment("The number of forbidden rarity items required for “Heart of the Abyss” to grant its 1st buff")
                .defineInRange("heartOfAbyssFirstRequire", 1, 0, 64);
        heartOfAbyssSecondRequire = BUILDER
                .comment("The number of forbidden rarity items required for “Heart of the Abyss” to grant its 2nd buff")
                .defineInRange("heartOfAbyssSecondRequire", 3, 0, 64);
        heartOfAbyssThirdRequire = BUILDER
                .comment("The number of forbidden rarity items required for “Heart of the Abyss” to grant its 3rd buff")
                .defineInRange("heartOfAbyssThirdRequire", 6, 0, 64);
        heartOfAbyssFourthRequire = BUILDER
                .comment("The number of forbidden rarity items required for “Heart of the Abyss” to grant it 4th buff")
                .defineInRange("heartOfAbyssFourthRequire", 9, 0, 64);

        ultimateArtifactThreshold = BUILDER
                .comment("Number of unique forbidden items a player must have held simultaneously to qualify for an ultimate artifact.")
                .defineInRange("ultimateArtifactThreshold", 5, 2, 10);

        finalTrialDurationTicks = BUILDER
                .comment("The duration in ticks a player must survive while holding all forbidden items to re-qualify for an ultimate artifact.")
                .defineInRange("finalTrialDurationTicks", 24000, 0, 72000); // Default: 20 minutes (1 day)

        BUILDER.pop();
    }

    public static final ModConfigSpec.IntValue unstoppableImpulseBaseTicks;
    public static final ModConfigSpec.IntValue unstoppableImpulseShortResetTicks;
    public static final ModConfigSpec.DoubleValue unstoppableImpulseExplosionPower;
    public static final ModConfigSpec.IntValue pactOfDecayIntervalTicks;
    public static final ModConfigSpec.IntValue whispersOfTheVoidRequiredTicks;
    public static final ModConfigSpec.IntValue whispersOfTheVoidGracePeriodTicks;
    public static final ModConfigSpec.IntValue heartOfAbyssFirstRequire;
    public static final ModConfigSpec.IntValue heartOfAbyssSecondRequire;
    public static final ModConfigSpec.IntValue heartOfAbyssThirdRequire;
    public static final ModConfigSpec.IntValue heartOfAbyssFourthRequire;
    public static final ModConfigSpec.IntValue ultimateArtifactThreshold;
    public static final ModConfigSpec.IntValue finalTrialDurationTicks;

    static final ModConfigSpec SPEC = BUILDER.build();
}