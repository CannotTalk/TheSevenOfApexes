package net.ardcameg.thesevenofapexes;

import net.neoforged.neoforge.common.ModConfigSpec;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Config {
    private static final ModConfigSpec.Builder BUILDER = new ModConfigSpec.Builder();
    private static final Logger log = LoggerFactory.getLogger(Config.class);

    // --- ここからが私たちのModの設定項目 ---

    // .comment() で、設定ファイル内に説明文を記載できる
    // .translation() を使えば、言語ファイルキーを指定して多言語対応も可能
    // .defineInRange() で、値の範囲を指定できる (DoubleValueの場合)

    static {
        BUILDER.push("Legendary Rarity Ability");

        wrathProbabilityModifier = BUILDER
                .comment("Percentage of max health dealt as damage by Wrath's lightning.")
                .defineInRange("wrathProbabilityModifier", 0.5, 0.0, 1.0);

        slothActivateBaseTicks = BUILDER
                .comment("Base number of ticks required for to activate for Sloth's ability to activate.")
                .defineInRange("slothBaseTicks", 300, 10, 1200);
        slothActivateTicksModifier = BUILDER
                .comment("Modifier number of ticks required for to activate for Sloth's ability.")
                .defineInRange("slothModifierTicks",50, 0, 200);
        slothHealthRegenerateBase = BUILDER
                .comment("Base percentage of max health regenerated by Sloth.")
                .defineInRange("slothHpRegenerateBase", 0.1, 0.1, 1.0);
        slothMendingBasePoint = BUILDER
                .comment("Amount of durability restored per player level by Sloth.")
                .defineInRange("slothMendingPoint", 2, 0, 1000);

        greedBaseDropRate = BUILDER
                .comment("Drop multiplier for Greed.")
                .defineInRange("greedBaseDropRate", 1, 0, 100);

        gluttonyBaseGauge = BUILDER
                .comment("Base gauge amount required to level up for Gluttony.")
                .defineInRange("gluttonyBaseGaugeAmount", 100, 0, 10000);
        gluttonyGaugeModifier = BUILDER
                .comment("Additional gauge amount required per level for Gluttony.")
                .defineInRange("gluttonyGaugeModifier", 100, 0, 10000);
        gluttonyHealthModifier = BUILDER
                .comment("Amount of max health gained per level up for Gluttony.")
                .defineInRange("gluttonyHealthModifier", 2, 0, 20);

        lustEffectLevel = BUILDER
                .comment("Level of the Hero of the Village effect granted by Lust.")
                .defineInRange("lustEffectLevel", 13, 0 , 255);

        sunsealBuffAttackPower = BUILDER
                .comment("Attack power multiplier from Sunlight Sacred Seal.")
                .defineInRange("sunsealAttackPowerModifier", 0.25, 0, 10.0);
        sunsealBuffSpeed = BUILDER
                .comment("Multiplier for movement speed enhanced by Sunlight Sacred Seal.")
                .defineInRange("sunsealSpeedModifier", 0.5, 0, 10.0);
        sunsealBuffAttackSpeed = BUILDER
                .comment("Multiplier for attack speed enhanced by Sunlight Sacred Seal.")
                .defineInRange("sunsealAttackSpeedModifier", 0.25, 0, 10.0);
        sunsealBuffPlantsBaseRadius = BUILDER
                .comment("Base radius of plant growth promotion for Sunlight Sacred Seal.")
                .defineInRange("sunsealPromotePlantsRadius", 2, 0, 16);
        sunsealBuffPlantsChecks = BUILDER
                .comment("Number of growth ticks applied in the area per second by Sunlight Sacred Seal.")
                .defineInRange("sunsealPromotePlantsTimes", 5, 1, 100);

        moonsealDebuffSpeedBaseMultiplier = BUILDER
                .comment("Base multiplier for player's movement speed modifier from Moonlight Sacred Seal.")
                .defineInRange("moonsealDebuffSpeedBaseMultiplier", -0.25, -100.0, 100.0);
        moonsealDebuffSpeedMultiplierModifier = BUILDER
                .comment("Multiplier modifier for player's movement speed modifier from Moonlight Sacred Seal.")
                .defineInRange("moonsealDebuffSpeedMultiplierModifier", -0.01, -100.0, 100.0);
        moonsealBuffBaseSlowdown = BUILDER
                .comment("Base multiplier for mobs' movement speed modifier from Moonlight Sacred Seal.")
                .defineInRange("moonsealBuffSpeedBaseMultiplier", -0.5, -100.0, 100.0);
        moonsealBuffSlowdownModifier = BUILDER
                .comment("Multiplier modifier for mobs' movement speed modifier from Moonlight Sacred Seal.")
                .defineInRange("moonsealBuffSpeedMultiplierModifier", -0.05, -100.0, 100.0);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue wrathProbabilityModifier;
    public static final ModConfigSpec.IntValue slothActivateBaseTicks;
    public static final ModConfigSpec.IntValue slothActivateTicksModifier;
    public static final ModConfigSpec.DoubleValue slothHealthRegenerateBase;
    public static final ModConfigSpec.IntValue slothMendingBasePoint;
    public static final ModConfigSpec.IntValue greedBaseDropRate;
    public static final ModConfigSpec.IntValue gluttonyBaseGauge;
    public static final ModConfigSpec.IntValue gluttonyGaugeModifier;
    public static final ModConfigSpec.IntValue gluttonyHealthModifier;
    public static final ModConfigSpec.IntValue lustEffectLevel;
    public static final ModConfigSpec.DoubleValue sunsealBuffAttackPower;
    public static final ModConfigSpec.DoubleValue sunsealBuffSpeed;
    public static final ModConfigSpec.DoubleValue sunsealBuffAttackSpeed;
    public static final ModConfigSpec.IntValue sunsealBuffPlantsBaseRadius;
    public static final ModConfigSpec.IntValue sunsealBuffPlantsChecks;
    public static final ModConfigSpec.DoubleValue moonsealDebuffSpeedBaseMultiplier;
    public static final ModConfigSpec.DoubleValue moonsealDebuffSpeedMultiplierModifier;
    public static final ModConfigSpec.DoubleValue moonsealBuffBaseSlowdown;
    public static final ModConfigSpec.DoubleValue moonsealBuffSlowdownModifier;


    // --- Epic Rarity Settings ---
    static {
        BUILDER.push("Epic Rarity Abilities"); // 設定ファイル内でカテゴリ分けするためのヘッダー

        lightningFistChainBaseProbability = BUILDER
                .comment("Base probability of chaining attacks by Lightning Fist.")
                .defineInRange("lightningFistBaseProbability", 0.25, 0.01,1.0);
        lightningFistChainProbabilityModifier = BUILDER
                .comment("Probability modifier of chaining attacks by Lightning Fist.")
                .defineInRange("lightningFistProbabilityModifier", 0.05, 0, 1.0);
        lightningFistChainAttackDecay = BUILDER
                .comment("Attack power decay per chain caused by Lightning Fist.")
                .defineInRange("lightningFistChainDecay", 0, 0, 1.0);


        heartOfStormProcChanceModifier = BUILDER
                .comment("Chance modifier for Heart of Storm to activate.")
                .defineInRange("heartOfStormProcChance", 0.3, 0, 1.0);
        heartOfStormProbability = BUILDER
                .comment("Percentage modifier of health damage by Heart of Storm's lightning.")
                .defineInRange("heartOfStormProbabilityModifier", 0.25, 0, 1.0);
        heartOfStormStunTicks = BUILDER
                .comment("Stun duration ticks when Heart of Storm is activated.")
                .defineInRange("heartOfStormStunTicks", 40, 0, 1200);

        phoenixFeatherModifier = BUILDER
                .comment("Max health multiplier after reviving with Phoenix Feather.")
                .defineInRange("phoenixFeatherMaxHealthModifier", -0.5, -0.9, 0);
        phoenixFeatherWeakTicks = BUILDER
                .comment("Weakening duration ticks when Phoenix Feather is activated.")
                .defineInRange("phoenixFeatherWeakTicks", 600, 0, 1200);

        shadowBindGlovesProcBaseChance = BUILDER
                .comment("Base probability of stunning the target by Shadow Bind Gloves.")
                .defineInRange("shadowBindGlovesBaseChance", 0.5, 0, 1.0);
        shadowBindGlovesStunTicks = BUILDER
                .comment("Stun duration ticks when Shadow Bind Gloves is activated.")
                .defineInRange("shadowBindGlovesStunTicks", 60, 0, 1200);

        berserkersDragAttackPower = BUILDER
                .comment("Multiplier for attack power enhanced by Berserker's Drag.")
                .defineInRange("berserkersDragAttackPower", 0.25, 0, 10.0);
        berserkersDragAttackSpeed = BUILDER
                .comment("Multiplier for attack speed enhanced by Berserker's Drag.")
                .defineInRange("berserkersDragAttackSpeed", 1.0, 0, 10.0);
        berserkersDragDamageIncrease = BUILDER
                .comment("Damage taken multiplier from Berserker's Drag.")
                .defineInRange("berserkersDragDamageIncrease", 1.0, 0, 10.0);

        lifeStealLifestealBaseRatio = BUILDER
                .comment("Percentage of damage dealt that is returned as health for Life Steal Stick.")
                .defineInRange("lifeSteelLifestealRatio", 0.1, 0.0, 1.0);
        lifeStealMaxHealthPenalty = BUILDER
                .comment("Max health multiplier from Life Steal Stick.")
                .defineInRange("lifeSteelMaxHealthPenalty", -0.25, -0.9, 0);

        arrivalOfRevivalBaseRadius = BUILDER
                .comment("Base radius of explosion for Arrival of Revival.")
                .defineInRange("arrivalOfRevivalBaseRadius", 5.0, 0, 16);
        arrivalOfRevivalBaseDamage = BUILDER
                .comment("Base damage of explosion for Arrival of Revival")
                .defineInRange("arrivalOfRevivalBaseDamage", 15.0, 0, 500.0);
        arrivalOfRevivalClearProbability = BUILDER
                .comment("Chance to clear inventory on revival for Arrival of Revival.")
                .defineInRange("arrivalOfRevivalClearProbability", 0.05, 0.0, 1.0);

        walkingAnathemaBaseRadius = BUILDER
                .comment("Base radius of aura for Walking Anathema.")
                .defineInRange("walkingAnathemaBaseRadius", 4.0, 0, 16.0);
        walkingAnathemaDamagePerSecond = BUILDER
                .comment("Base damage of aura per second for Walking Anathema.")
                .defineInRange("walkingAnathemaDamagePerSecond", 3, 1, 500.0);

        scarredGrailExplodeChance = BUILDER
                .comment("Chance modifier for Heart of Storm to activate.")
                .defineInRange("scarredGrailExplodeChance", 0.2, 0.1, 0.99);

        voidMantleVanishChance = BUILDER
                .comment("Chance for the item to vanish when invisibility ends for Mantle of the Void.")
                .defineInRange("voidMantleVanishChance", 0.05, 0.01, 1.0);
        voidMantleConsumeIntervalTicks = BUILDER
                .comment("Interval ticks for consuming meal in vanishing for Mantle of the Void")
                .defineInRange("voidMantleConsumeInterval", 40, 0, 1200);
        voidMantleConsumeHungerPoint = BUILDER
                .comment("Points for consuming hunger for Mantle of the Void")
                .defineInRange("voidMantleConsumePoint", 4.0, 1.0, 40.0);

        steelClawsProcChanceBase = BUILDER
                .comment("Base chance for Claws of Steel to activate. (for the first item)")
                .defineInRange("steelClawsProcChanceBase", 0.025, 0.0, 1.0);
        steelClawsSelfKillChance = BUILDER
                .comment("Chance to kill yourself instead of the target when Claws of Steel activates.")
                .defineInRange("steelClawsSelfKillChance", 0.01, 0.0, 1.0);

        fiendsBargainXpCost = BUILDER
                .comment("Experience level required for each the Fiend's Bargain")
                .defineInRange("fiendsBargainXpCost", 5, 1, 100);

        reversalHourglassProcBaseChance = BUILDER
                .comment("Base chance of reflecting damage for Hourglass of Reversal")
                .defineInRange("reversalHourglassReflectBaseChance", 0.1, 0.01, 1.0);
        reversalHourglassReflectRate = BUILDER
                .comment("Damage rate reflected by Reversal of Hourglass")
                .defineInRange("reversalHourglassReflectRate", 0.5, 0.01, 1.0);
        reversalHourglassMaxHealthPenalty = BUILDER
                .comment("Percentage of max health modifier from Reversal of Hourglass.")
                .defineInRange("reversalHourglassMaxHealthPenalty", -0.25, -0.9, 0);

        goliathsGavelBaseRadius = BUILDER
                .comment("Base radius of attack for Goliath's Gavel.")
                .defineInRange("gliathsGavelBaseRadius", 3.0, 0.5, 16.0);
        goliathsGavelDamageModifier = BUILDER
                .comment("Area damage modifier for Goliath's Gavel")
                .defineInRange("goliathGavelDamageModifier", 0.75, 0, 1.0);
        goliathsGavelAttackPowerModifier = BUILDER
                .comment("Multiplier for attack power enhanced by Goliath's Gavel.")
                .defineInRange("goliathsGavelAttackPowerModifier", 0.25, 0, 10.0);
        goliathsGavelAttackSpeedModifier = BUILDER
                .comment("Multiplier for attack speed modifier by Goliath's Gavel.")
                .defineInRange("goliathsGavelAttackPowerModifier", -0.5, -100.0, 0);
        goliathsGavelMovementSpeedModifier = BUILDER
                .comment("Multiplier for movement speed modifier by Goliath's Gavel.")
                .defineInRange("goliathsGavelAttackPowerModifier", -0.15, -100.0, 0);

        ferrymanBargeBaseRegenerate = BUILDER
                .comment("Base Health restored by the Ferryman Barge")
                .defineInRange("ferrymanBargeBaseRegenerate", 2.0, 0.0, 100.0);
        ferrymanBargeSpectatorBaseTicks = BUILDER
                .comment("Base time ticks for Spectator Mode")
                .defineInRange("ferrymanBargeSpectatorBaseTicks", 20, 1, 1200);

        BUILDER.pop(); // カテゴリ分けを終了
    }

    public static final ModConfigSpec.DoubleValue lightningFistChainBaseProbability;
    public static final ModConfigSpec.DoubleValue lightningFistChainProbabilityModifier;
    public static final ModConfigSpec.DoubleValue lightningFistChainAttackDecay;
    public static final ModConfigSpec.DoubleValue heartOfStormProcChanceModifier;
    public static final ModConfigSpec.DoubleValue heartOfStormProbability;
    public static final ModConfigSpec.IntValue heartOfStormStunTicks;
    public static final ModConfigSpec.DoubleValue phoenixFeatherModifier;
    public static final ModConfigSpec.IntValue phoenixFeatherWeakTicks;
    public static final ModConfigSpec.DoubleValue shadowBindGlovesProcBaseChance;
    public static final ModConfigSpec.IntValue shadowBindGlovesStunTicks;
    public static final ModConfigSpec.DoubleValue berserkersDragAttackPower;
    public static final ModConfigSpec.DoubleValue berserkersDragAttackSpeed;
    public static final ModConfigSpec.DoubleValue berserkersDragDamageIncrease;
    public static final ModConfigSpec.DoubleValue lifeStealLifestealBaseRatio;
    public static final ModConfigSpec.DoubleValue lifeStealMaxHealthPenalty;
    public static final ModConfigSpec.DoubleValue arrivalOfRevivalBaseRadius;
    public static final ModConfigSpec.DoubleValue arrivalOfRevivalBaseDamage;
    public static final ModConfigSpec.DoubleValue arrivalOfRevivalClearProbability;
    public static final ModConfigSpec.DoubleValue walkingAnathemaBaseRadius;
    public static final ModConfigSpec.DoubleValue walkingAnathemaDamagePerSecond;
    public static final ModConfigSpec.DoubleValue scarredGrailExplodeChance;
    public static final ModConfigSpec.DoubleValue voidMantleVanishChance;
    public static final ModConfigSpec.IntValue voidMantleConsumeIntervalTicks;
    public static final ModConfigSpec.DoubleValue voidMantleConsumeHungerPoint;
    public static final ModConfigSpec.DoubleValue steelClawsProcChanceBase;
    public static final ModConfigSpec.DoubleValue steelClawsSelfKillChance;
    public static final ModConfigSpec.IntValue fiendsBargainXpCost;
    public static final ModConfigSpec.DoubleValue reversalHourglassProcBaseChance;
    public static final ModConfigSpec.DoubleValue reversalHourglassReflectRate;
    public static final ModConfigSpec.DoubleValue reversalHourglassMaxHealthPenalty;
    public static final ModConfigSpec.DoubleValue goliathsGavelBaseRadius;
    public static final ModConfigSpec.DoubleValue goliathsGavelDamageModifier;
    public static final ModConfigSpec.DoubleValue goliathsGavelAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue goliathsGavelAttackSpeedModifier;
    public static final ModConfigSpec.DoubleValue goliathsGavelMovementSpeedModifier;
    public static final ModConfigSpec.DoubleValue ferrymanBargeBaseRegenerate;
    public static final ModConfigSpec.IntValue ferrymanBargeSpectatorBaseTicks;

    static {
        BUILDER.push("Rare Rarity Ability");

        nightOwlEyesAttackPowerModifier = BUILDER
                .comment("Multiplier for attack power modifier by Eyes of the Night Owl.")
                .defineInRange("nightOwlEyesAttackModifier", -0.25, -100.0, 0);
        nightOwlEyesMovementSpeedModifier = BUILDER
                .comment("Multiplier for movement speed modifier by Eyes of the Night Owl.")
                .defineInRange("nightOwlEyesSpeedModifier", -0.1, -100.0, 0);

        snipersMonocleVelocityModifier = BUILDER
                .comment("Arrow velocity multiplier from Sniper's Monocle.")
                .defineInRange("snipersMonocleVelocityModifier", 0.3, 0.1, 100.0);
        snipersMonocleDamageModifier = BUILDER
                .comment("Modifier increase in arrow damage provided by Sniper's Monocle")
                .defineInRange("snipersMonocleDamageModifier", 0.15, 0.1, 10.0);
        snipersMonocleMeleeDamageModifier = BUILDER
                .comment("Multiplier for melee damage modifier by Sniper's Monocle")
                .defineInRange("goliathsGavelAttackPowerModifier", -0.2, -100.0, 0);

        gillsCharmDebuffMovementModifier = BUILDER
                .comment("Multiplier for melee damage modifier by Gills Charm")
                .defineInRange("gillsCharmMovementSpeedModifier", -0.05, -100.0, 0);

        lastStandNeedHealth = BUILDER
                .comment("Max percentage of health required to activate Last Stand")
                .defineInRange("lastStandNeedHealth", 0.25, 0.1, 1.0);
        lastStandAttackSpeedModifier = BUILDER
                .comment("Multiplier for attack speed enhanced by Last Stand")
                .defineInRange("lastStandAttackSpeedModifier", 0.5, 0, 10.0);
        lastStandAttackPowerModifier = BUILDER
                .comment("Multiplier for attack power enhanced by Last Stand")
                .defineInRange("lastStandAttackPowerModifier", 0.25, 0, 10.0);

        blademastersProwessCloseRangeAttackModifier = BUILDER
                .comment("Multiplier modifier to close-range attack power by Blademaster's Prowess.")
                .defineInRange("blademastersProwessCloseRangeAttackModifier", 0.3, 0, 100);
        blademastersProwessAttackSpeedModifier = BUILDER
                .comment("Multiplier modifier to attack speed by Blademaster's Prowess.")
                .defineInRange("blademastersProwessAttackSpeedModifier", 0.15, 0, 100.0);
        blademastersProwessLongRangeAttackModifier = BUILDER
                .comment("Multiplier modifier to long-range attack power by Blademaster's Prowess.")
                .defineInRange("blademastersProwessLongRangeAttackModifier", -0.2, -100.0, 0);

        deadeyeGlassAttackPowerModifier = BUILDER
                .comment("Multiplier for attack power enhanced by Deadeye Glass.")
                .defineInRange("deadeyeGlassAttackPowerModifier", 0.5, 0, 100.0);

        architectsHasteBreakSpeedModifier = BUILDER
                .comment("Block Breaking Speed Multiplier modifier by Architect's Haste.")
                .defineInRange("architectsHasteBreakSpeedModifier", 0.25, 0, 100.0);
        architectsHasteInteractRangeModifier = BUILDER
                .comment("Block Interaction Range Multiplier modifier by Architect's Haste.")
                .defineInRange("architectsHasteInteractRangeModifier", 0.25, 0, 100.0);
        architectsHasteToolPenaltyModifier = BUILDER
                .comment("Probability that tool durability is consumed extra by Architect's Haste.")
                .defineInRange("architectsHasteToolPenalty", 0.25, 0, 1.0);

        bountyTotemAdditionalGrowthChance = BUILDER
                .comment("Probability of crops growing additionally by Totem of Bounty.")
                .defineInRange("bountyTotemAdditionalGrowthChance", 0.5, 0, 10.0);
        bountyTotemFarmlandChangeChance = BUILDER
                .comment("Probability that farmland changes when harvesting crops by Totem of Bounty.")
                .defineInRange("bountyTotemFarmlandChangeChance", 0.2, 0, 1.0);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue nightOwlEyesAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue nightOwlEyesMovementSpeedModifier;
    public static final ModConfigSpec.DoubleValue snipersMonocleVelocityModifier;
    public static final ModConfigSpec.DoubleValue snipersMonocleDamageModifier;
    public static final ModConfigSpec.DoubleValue snipersMonocleMeleeDamageModifier;
    public static final ModConfigSpec.DoubleValue gillsCharmDebuffMovementModifier;
    public static final ModConfigSpec.DoubleValue lastStandNeedHealth;
    public static final ModConfigSpec.DoubleValue lastStandAttackSpeedModifier;
    public static final ModConfigSpec.DoubleValue lastStandAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue blademastersProwessCloseRangeAttackModifier;
    public static final ModConfigSpec.DoubleValue blademastersProwessAttackSpeedModifier;
    public static final ModConfigSpec.DoubleValue blademastersProwessLongRangeAttackModifier;
    public static final ModConfigSpec.DoubleValue deadeyeGlassAttackPowerModifier;
    public static final ModConfigSpec.DoubleValue architectsHasteBreakSpeedModifier;
    public static final ModConfigSpec.DoubleValue architectsHasteInteractRangeModifier;
    public static final ModConfigSpec.DoubleValue architectsHasteToolPenaltyModifier;
    public static final ModConfigSpec.DoubleValue bountyTotemAdditionalGrowthChance;
    public static final ModConfigSpec.DoubleValue bountyTotemFarmlandChangeChance;

    static {
        BUILDER.push("Uncommon Rarity Ability");

        pearlEyeDamageModifier = BUILDER
                .comment("Damage Modifier by Eye of the Pearl.")
                .defineInRange("pearlEyeDamageModifier", -2, -100.0, 100.0);

        scentOfCompostBoostComposterChance = BUILDER
                .comment("Probability of further increasing the compost level in the composter by Scent of Compost.")
                .defineInRange("scentOfCompostBoostComposterChance", 0.1, -100.0, 100.0);

        fertileClodExtraBornmealChance = BUILDER
                .comment("Probability that crops will grow one additional stage when bone meal is used by Fertile Clod.")
                .defineInRange("fertileClodExtraBornmealChance", 0.1, -100.0, 100.0);

        luckyFlintFlintDropAdditionalChance = BUILDER
                .comment("Additional chance to drop flint from gravel with Lucky Flint.")
                .defineInRange("luckyFlintFlintDropAdditionalChance", 0.15, 0, 100.0);

        healingLinensHealThreshold = BUILDER
                .comment("Health recovered when right-clicked a bed by Healing Linens.")
                .defineInRange("healingLinensHealThreshold", 6.0, 0, 100.0);

        BUILDER.pop();
    }

    public static final ModConfigSpec.DoubleValue pearlEyeDamageModifier;
    public static final ModConfigSpec.DoubleValue scentOfCompostBoostComposterChance;
    public static final ModConfigSpec.DoubleValue fertileClodExtraBornmealChance;
    public static final ModConfigSpec.DoubleValue luckyFlintFlintDropAdditionalChance;
    public static final ModConfigSpec.DoubleValue healingLinensHealThreshold;

    static {
        BUILDER.push("Common Rarity Ability");

        oldAnglersDiaryMessageCount = BUILDER
                .comment("The total number of messages available for the Old Angler's Diary.")
                .defineInRange("oldAnglersDiaryMessageCount", 20, 1, 255);

        BUILDER.pop();
    }

    public static final ModConfigSpec.IntValue oldAnglersDiaryMessageCount;


    static final ModConfigSpec SPEC = BUILDER.build();
}